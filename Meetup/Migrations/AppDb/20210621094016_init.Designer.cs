// <auto-generated />
using System;
using Meetup.ApplicationDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Meetup.Migrations.AppDb
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210621094016_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Meetup.ApplicationDbContext.Model.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId1")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Meetup.ApplicationDbContext.Model.MeetupLocation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndFreeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsFreeTime")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartFreeTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("MeetupLocations");
                });

            modelBuilder.Entity("Meetup.ApplicationDbContext.Model.Meetups", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double>("DurationMeetup")
                        .HasColumnType("double precision");

                    b.Property<byte[]>("Images")
                        .HasColumnType("bytea");

                    b.Property<string>("MeetupLocationId")
                        .HasColumnType("text");

                    b.Property<string>("Topic")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MeetupLocationId");

                    b.ToTable("Meetups");
                });

            modelBuilder.Entity("Meetup.ApplicationDbContext.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("text");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Post")
                        .HasColumnType("text");

                    b.Property<int>("Work")
                        .HasColumnType("integer");

                    b.Property<int>("WorkExperience")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MeetupsUser", b =>
                {
                    b.Property<string>("MeetupsId")
                        .HasColumnType("text");

                    b.Property<string>("UsersId")
                        .HasColumnType("text");

                    b.HasKey("MeetupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("MeetupsUser");
                });

            modelBuilder.Entity("Meetup.ApplicationDbContext.Model.Language", b =>
                {
                    b.HasOne("Meetup.ApplicationDbContext.Model.User", null)
                        .WithMany("Language")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Meetup.ApplicationDbContext.Model.Meetups", b =>
                {
                    b.HasOne("Meetup.ApplicationDbContext.Model.MeetupLocation", "MeetupLocation")
                        .WithMany("Meetups")
                        .HasForeignKey("MeetupLocationId");

                    b.Navigation("MeetupLocation");
                });

            modelBuilder.Entity("MeetupsUser", b =>
                {
                    b.HasOne("Meetup.ApplicationDbContext.Model.Meetups", null)
                        .WithMany()
                        .HasForeignKey("MeetupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meetup.ApplicationDbContext.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Meetup.ApplicationDbContext.Model.MeetupLocation", b =>
                {
                    b.Navigation("Meetups");
                });

            modelBuilder.Entity("Meetup.ApplicationDbContext.Model.User", b =>
                {
                    b.Navigation("Language");
                });
#pragma warning restore 612, 618
        }
    }
}
